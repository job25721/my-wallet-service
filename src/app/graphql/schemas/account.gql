type Account {
  _id: String!
  name: String!
  amount: Float!
  ownerId: String!
  color: String!
  histories: [History]
}

input CreateAccountArg {
  name: String!
  amount: Float!
  color: String!
}

input UpdateAccountArg {
  name: String
  amount: Float
  color: String
}

enum AcoountEvent {
  income
  outcome
}

type AddAccountEventResponse {
  name: String!
  currentAmount: Float!
  type: AcoountEvent!
  date: String!
}

input AddAccountEvent {
  type: String!
  subType: String
  description: String
  date: String!
  amount: Float!
}

type Query {
  getAccounts: [Account]!
}

type Mutation {
  createAccount(data: CreateAccountArg!): Account!
  updateAccount(id: String!, data: UpdateAccountArg): Account!
  deleteByID(id: String!): String!
  AddAccountEvent(id: String!, type: AcoountEvent!, data: AddAccountEvent): AddAccountEventResponse!
}
